
from pymongo import MongoClient
import requests
import telebot
from telebot import types
import re
regex = '^[a-z0-9]+[\._]?[a-z0-9]+[@]\w+[.]\w{2,3}$'

TOKEN="1396647782:AAHiG923V6qYDD6msxdLTe7iSnzUTE9N8Ec"
url="https://api.telegram.org/bot1396647782:AAHiG923V6qYDD6msxdLTe7iSnzUTE9N8Ec"
bot=telebot.TeleBot(TOKEN)
greetings=("hello","hey","sup")

def get_message_text(update):
    message_text = update["message"]["text"]
    return message_text
def last_update(req):
    response = requests.get(req + "getUpdates")
    response = response.json()
    result = response["result"]
    total_updates = len(result) - 1
    return result[total_updates]


@bot.message_handler(commands=['start'])
def welcome(m):
    cid = m.chat.id
    markup = types.InlineKeyboardMarkup()
    markup = types.InlineKeyboardMarkup()
    markup.row(
        telebot.types.InlineKeyboardButton("Know more about insent", callback_data='help'))
    markup.row(
        types.InlineKeyboardButton("Speak with a Conversational Marketing expert üôå", callback_data='help2'))
    markup.row(
        types.InlineKeyboardButton(" Show me a demo üôã", callback_data='help3'))
    markup.row(
        types.InlineKeyboardButton(" Just browsing üôã", callback_data='help4'))

    bot.send_message(cid, "Hi \n\n Welcome To My Bot \n\n Please Choose One :)", disable_notification=True,
                     reply_markup=markup)

    bot.send_message(cid, "Hi \n\n Welcome To My Bot \n\n Please Choose One :)", disable_notification=True,
                     reply_markup=markup)

def send_message(chat_id, message_text):
    params = {"chat_id": chat_id, "text": message_text}
    response = requests.post(url + "sendMessage", data=params)
    return response


def insent(msg):
    markup = types.InlineKeyboardMarkup()
    markup.row(
      telebot.types.InlineKeyboardButton("Would you like to see a live demo?üíª", callback_data='help5'))
    bot.send_message(msg.chat.id, 'By integrating with your marketing automation and CRM platforms , '
                                                 'Insent identifies the browsing accounts before they fill your form '
                                                 'If the account is a good fit and is ready for a conversation , '
                                                 'Insent will alert the right SDRs/AEs and enable them to send a contextual, real-time message. ',reply_markup=markup)

def expert(msg):
    bot.send_message(msg.chat.id,"Let me try to see if the team is available at the moment")
    y=checkmail(msg.chat.id,db)
    print(y)
    if(y==True):
        bot.send_message(msg.chat.id,"May I have a good email for you")
    else:
        bot.send_message(msg.chat.id,"Will Mail you!!! ")
def demo(msg):
    bot.send_message(msg.chat.id,"Awesome. Let‚Äôs fix a time for you to see the demo ‚ú® ")
def demo2(msg):
    markup = types.InlineKeyboardMarkup()
    markup.row(telebot.types.InlineKeyboardButton("No, I don't want to see the demo",callback_data="help4"))
    bot.send_message(msg.chat.id, "Sure?", reply_markup=markup)
def browse(msg):
    bot.send_message(msg.chat.id,"Alright. Talk soon, bye now üëã")
def demo1(msg):
    markup = types.InlineKeyboardMarkup()
    markup.row(
        telebot.types.InlineKeyboardButton("Absolutelyüëç",callback_data="help6"))
    markup.row(
        telebot.types.InlineKeyboardButton("Not now ‚è≥Thanks though!", callback_data="help4"))

    bot.send_message(msg.chat.id,"please choose",reply_markup=markup)


@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
     if call.message:
        if call.data == "help":
            bot.answer_callback_query(callback_query_id=call.id)
            insent(call.message)
     if call.message:
        if call.data == "help2":
            bot.answer_callback_query(callback_query_id=call.id)
            expert(call.message)
     if call.message:
        if call.data == "help3":
            bot.answer_callback_query(callback_query_id=call.id)
            demo(call.message)
     if call.message:
        if call.data == "help4":
            bot.answer_callback_query(callback_query_id=call.id)
            browse(call.message)
     if call.message:
        if call.data == "help5":
            bot.answer_callback_query(callback_query_id=call.id)
            demo1(call.message)
     if call.message:
        if call.data == "help6":
            bot.answer_callback_query(callback_query_id=call.id)
            demo2(call.message)
     if call.message:
        if call.data == "help7":
            bot.answer_callback_query(callback_query_id=call.id)

def configureDatabase():
    client = MongoClient("mongodb+srv://test:test@chatapp.u9lpo.mongodb.net/<dbname>?retryWrites=true&w=majority&ssl=true&ssl_cert_reqs=CERT_NONE")
    return client.get_database('insent')
db=configureDatabase()

@bot.message_handler(content_types=['text'])
@bot.message_handler(content_types=['text'])
def msg(m):

    print(m)
    text=m.text
    if text.lower() in greetings:
        cid = m.chat.id
        markup = types.InlineKeyboardMarkup()
        markup.row(
            telebot.types.InlineKeyboardButton("Know more about insent",callback_data='help'))
        markup.row(
            types.InlineKeyboardButton("Speak with a Conversational Marketing expert üôå",callback_data='help2'))
        markup.row(
            types.InlineKeyboardButton(" Show me a demo üôã",callback_data='help3'))
        markup.row(
            types.InlineKeyboardButton(" Just browsing üôã",callback_data='help4'))

        bot.send_message(cid, "Hi \n\n Welcome To My Bot \n\n Please Choose One :)", disable_notification=True,
                     reply_markup=markup)
        savechat_id(cid,"null",db)

    if (re.search(regex, text)):
        cid = m.chat.id

        markup = types.InlineKeyboardMarkup()
        markup.row(
            telebot.types.InlineKeyboardButton("That'd be great üëç", callback_data='help3'))
        markup.row(
            types.InlineKeyboardButton("Not right now", callback_data='help4'))
        bot.send_message(cid, "Do you want to pick a time for a demo without waiting?",disable_notification=True,
                     reply_markup=markup)
        save_email(cid,text,db)


def savechat_id(chat_id,text,db):
    records=db.bot
    if (records.find_one({"chat_id": chat_id})):
        print("x")
        records.update_one({'chat_id': chat_id}, {"$set": {"chat_id": chat_id}})
    else:
        print("y")
        records.insert_one({'chat_id':chat_id})


def save_email(chat_id,text,dbConn):
        records = dbConn.bot
        if (records.find({"chat_id": chat_id})):
            records.update_one({"chat_id":chat_id},{"$set":{"Email":text }})

def checkmail(chat_id,db):
    records=db.bot
    if (records.find_one({"$and": [{"chat_id":chat_id}, {"Email": {"$exists":True}}]})):
        return False
    else:
        return True

bot.polling()





